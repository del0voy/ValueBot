import telebot
import config
import requests
import xml.etree.ElementTree as ET
from telebot import types
from datetime import datetime
import os

bot = telebot.TeleBot(config.TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
states = {}
HISTORY_FILE = r"C:\Programming\curses.txt"
os.makedirs(os.path.dirname(HISTORY_FILE), exist_ok=True)

def is_today_saved():
    today = datetime.now().strftime("%d-%m-%Y")
    try:
        with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
            return f"=== {today} ===" in content
    except FileNotFoundError:
        return False

def save_daily_rates(rates):
    today = datetime.now().strftime("%d-%m-%Y")
    
    if is_today_saved():
        return
    
    rates_str = f"\n\n=== {today} ===\n"
    rates_str += "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã:\n"
    for currency, rate in rates["commercial"].items():
        rates_str += f"{currency}: {rate['sell']:.4f} / {rate['buy']:.4f} ‚ÇΩ\n"
    
    rates_str += "\n–ö—É—Ä—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞–Ω–∫–∞:\n"
    for currency, rate in rates["internetbank"].items():
        rates_str += f"{currency}: {rate['sell']:.4f} / {rate['buy']:.4f} ‚ÇΩ\n"
    
    with open(HISTORY_FILE, 'a', encoding='utf-8') as f:
        f.write(rates_str)

def load_rates_by_date(date):
    try:
        with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
        
        date_header = f"=== {date} ==="
        if date_header in content:
            start_idx = content.index(date_header)
            end_idx = content.find("\n\n===", start_idx + 1)
            return content[start_idx:end_idx if end_idx != -1 else None]
        return None
    except FileNotFoundError:
        return None

def get_exchange_rates():
    url = "https://www.agroprombank.com/xmlinformer.php"
    response = requests.get(url)
    if response.status_code == 200:
        root = ET.fromstring(response.content)
        exchange_rates = {"commercial": {}, "internetbank": {}, "date": datetime.now().strftime("%H:%M:%S %d-%m-%Y")}
        
        for course in root.findall(".//course[@type='commercial']"):
            for currency in course.findall("currency"):
                code = currency.get('code')
                sell_rate = currency.find('currencySell')
                buy_rate = currency.find('currencyBuy')
                if sell_rate is not None and buy_rate is not None:
                    exchange_rates["commercial"][code] = {
                        'sell': float(sell_rate.text),
                        'buy': float(buy_rate.text)
                    }
        
        for course in root.findall(".//course[@type='internetbank']"):
            for currency in course.findall("currency[@codeBuy='RUP']"):
                code = currency.get('code')
                sell_rate = currency.find('currencySell')
                buy_rate = currency.find('currencyBuy')
                if sell_rate is not None and buy_rate is not None:
                    exchange_rates["internetbank"][code] = {
                        'sell': float(sell_rate.text),
                        'buy': float(buy_rate.text)
                    }
        
        save_daily_rates(exchange_rates)
        return exchange_rates
    else:
        return None

def create_main_menu():
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data="convert")
    btn2 = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data="currency")
    btn3 = types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    markup.add(btn1, btn2, btn3)
    return markup

def create_currency_menu():
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üíµ USD", callback_data="currency_USD"),
        types.InlineKeyboardButton("üç∫ RUB", callback_data="currency_RUB"),
        types.InlineKeyboardButton("üê∑ UAH", callback_data="currency_UAH"),
        types.InlineKeyboardButton("üë§ EUR", callback_data="currency_EUR"),
        types.InlineKeyboardButton("üë¶üèø MDL", callback_data="currency_MDL"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    ]
    markup.add(*buttons)
    return markup

def create_rates_buttons():
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton("üìà –ò—Å—Ç–æ—Ä–∏—è –∫—É—Ä—Å–æ–≤", callback_data="history")
    btn2 = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    markup.add(btn1, btn2)
    return markup

def create_back_buttons(with_another_currency=True):
    markup = types.InlineKeyboardMarkup(row_width=1)
    if with_another_currency:
        btn1 = types.InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É", callback_data="convert")
        markup.add(btn1)
    btn2 = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    markup.add(btn2)
    return markup

def create_help_buttons():
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º", url="https://t.me/deloVVoy42")
    btn2 = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    markup.add(btn1, btn2)
    return markup

def format_rates_message(rates):
    message = (
        "üìä *–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç* üìä\n\n"
        "*–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã:*\n"
    )
    for currency_code, rate in rates["commercial"].items():
        message += f"‚ñ™ {currency_code}: {rate['sell']:.4f} / {rate['buy']:.4f} ‚ÇΩ\n"
    
    message += "\n*–ö—É—Ä—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞–Ω–∫–∞:*\n"
    for currency_code, rate in rates["internetbank"].items():
        message += f"‚ñ™ {currency_code}: {rate['sell']:.4f} / {rate['buy']:.4f} ‚ÇΩ\n"
    
    message += f"\nüïí *{rates['date']}*"
    return message

@bot.message_handler(commands=['start', 'menu'])
def start(message):
    welcome_msg = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ValueBot\nüë®‚Äçüíª –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ"
    bot.send_message(message.chat.id, welcome_msg, reply_markup=create_main_menu())

@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def back_to_menu(call):
    start(call.message)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "help")
def show_help(call):
    help_text = (
        "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n"
        "1. *–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º–∏ –∫—É—Ä—Å–∞–º–∏ –∏ –∫—É—Ä—Å–∞–º–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞–Ω–∫–æ–≤?*\n"
        "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏—è—Ö –±–∞–Ω–∫–∞, "
        "–∞ –∫—É—Ä—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞–Ω–∫–∞ - –ø—Ä–∏ –æ–Ω–ª–∞–π–Ω-–æ–ø–µ—Ä–∞—Ü–∏—è—Ö —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "
        "–∏–ª–∏ –≤–µ–±-—Å–∞–π—Ç –±–∞–Ω–∫–∞. –û–±—ã—á–Ω–æ –∫—É—Ä—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞–Ω–∫–∞ –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–µ.\n\n"
        "2. *–ö–∞–∫ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç?*\n"
        "–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –±–∞–Ω–∫–∞.\n\n"
        "3. *–ö–∞–∫–∏–µ –≤–∞–ª—é—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏?*\n"
        "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: USD, EUR, RUB, UAH, MDL."
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=help_text,
        parse_mode="Markdown",
        reply_markup=create_help_buttons()
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "history")
def ask_history_date(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤–∞–º –Ω—É–∂–µ–Ω –∫—É—Ä—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY:",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="currency")
        )
    )
    states[call.message.chat.id] = "waiting_for_history_date"
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "convert")
def convert_currency(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
        reply_markup=create_currency_menu()
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "currency")
def show_currency_rates(call):
    rates = get_exchange_rates()
    if rates is None:
        bot.send_message(
            call.message.chat.id,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_back_buttons(False)
        )
    else:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=format_rates_message(rates),
            parse_mode="Markdown",
            reply_markup=create_rates_buttons()
        )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("currency_"))
def select_currency(call):
    currency = call.data.split("_")[1]
    states[call.message.chat.id] = {'currency': currency}
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {currency}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
        reply_markup=None
    )
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: states.get(message.chat.id) == "waiting_for_history_date")
def handle_history_date(message):
    try:
        input_date = message.text.strip()
        datetime.strptime(input_date, "%d-%m-%Y")
        
        rates = load_rates_by_date(input_date)
        if rates:
            bot.send_message(
                message.chat.id,
                f"üìÖ *–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∑–∞ {input_date}*\n\n{rates}",
                parse_mode="Markdown",
                reply_markup=create_rates_buttons()
            )
        else:
            bot.send_message(
                message.chat.id,
                f"–ö—É—Ä—Å–∞ –∑–∞ {input_date} –Ω–µ—Ç –≤ –∞—Ä—Ö–∏–≤–µ.",
                reply_markup=create_rates_buttons()
            )
        
        del states[message.chat.id]
    except ValueError:
        bot.reply_to(
            message,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY:",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="currency")
            )
        )

@bot.message_handler(func=lambda message: isinstance(states.get(message.chat.id), dict) and 'currency' in states[message.chat.id])
def handle_conversion(message):
    try:
        amount = float(message.text)
        user_state = states[message.chat.id]
        selected_currency = user_state['currency']
        
        exchange_rates = get_exchange_rates()
        if exchange_rates is None:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_back_buttons())
            return
        
        commercial_rates = exchange_rates["commercial"].get(selected_currency)
        internetbank_rates = exchange_rates["internetbank"].get(selected_currency)
        
        if commercial_rates and internetbank_rates:
            sell_commercial = commercial_rates['sell']
            buy_commercial = commercial_rates['buy']
            sell_internetbank = internetbank_rates['sell']
            buy_internetbank = internetbank_rates['buy']
            
            amount_in_rup_commercial = amount * sell_commercial
            amount_in_rup_internetbank = amount * sell_internetbank
            
            response_msg = (
                f"üîπ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏* üîπ\n\n"
                f"–°—É–º–º–∞: *{amount:.2f} {selected_currency}*\n\n"
                f"*–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –∫—É—Ä—Å*:\n"
                f"‚ñ™ –ü—Ä–æ–¥–∞–∂–∞: {sell_commercial:.4f} ‚ÇΩ\n"
                f"‚ñ™ –ü–æ–∫—É–ø–∫–∞: {buy_commercial:.4f} ‚ÇΩ\n"
                f"‚ñ™ –ò—Ç–æ–≥–æ: *{amount_in_rup_commercial:.2f} ‚ÇΩ*\n\n"
                f"*–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞–Ω–∫*:\n"
                f"‚ñ™ –ü—Ä–æ–¥–∞–∂–∞: {sell_internetbank:.4f} ‚ÇΩ\n"
                f"‚ñ™ –ü–æ–∫—É–ø–∫–∞: {buy_internetbank:.4f} ‚ÇΩ\n"
                f"‚ñ™ –ò—Ç–æ–≥–æ: *{amount_in_rup_internetbank:.2f} ‚ÇΩ*\n\n"
                f"üïí *{exchange_rates['date']}*"
            )
            
            bot.send_message(
                message.chat.id, 
                response_msg, 
                parse_mode="Markdown", 
                reply_markup=create_back_buttons()
            )
        else:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã.", reply_markup=create_back_buttons())
        
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

bot.polling()